package com.amelendez.lgo.storage.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.amelendez.lgo.storage.dao.Languo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LANGUO".
*/
public class LanguoDao extends AbstractDao<Languo, Long> {

    public static final String TABLENAME = "LANGUO";

    /**
     * Properties of entity Languo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Term = new Property(1, String.class, "term", false, "TERM");
        public final static Property Definition = new Property(2, String.class, "definition", false, "DEFINITION");
        public final static Property Example = new Property(3, String.class, "example", false, "EXAMPLE");
        public final static Property Hits = new Property(4, int.class, "hits", false, "HITS");
        public final static Property Level = new Property(5, float.class, "level", false, "LEVEL");
        public final static Property InsertDate = new Property(6, java.util.Date.class, "insertDate", false, "INSERT_DATE");
        public final static Property ChangedDate = new Property(7, java.util.Date.class, "changedDate", false, "CHANGED_DATE");
    };


    public LanguoDao(DaoConfig config) {
        super(config);
    }
    
    public LanguoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LANGUO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TERM\" TEXT NOT NULL UNIQUE ," + // 1: term
                "\"DEFINITION\" TEXT NOT NULL ," + // 2: definition
                "\"EXAMPLE\" TEXT," + // 3: example
                "\"HITS\" INTEGER NOT NULL ," + // 4: hits
                "\"LEVEL\" REAL NOT NULL ," + // 5: level
                "\"INSERT_DATE\" INTEGER," + // 6: insertDate
                "\"CHANGED_DATE\" INTEGER);"); // 7: changedDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LANGUO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Languo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTerm());
        stmt.bindString(3, entity.getDefinition());
 
        String example = entity.getExample();
        if (example != null) {
            stmt.bindString(4, example);
        }
        stmt.bindLong(5, entity.getHits());
        stmt.bindDouble(6, entity.getLevel());
 
        java.util.Date insertDate = entity.getInsertDate();
        if (insertDate != null) {
            stmt.bindLong(7, insertDate.getTime());
        }
 
        java.util.Date changedDate = entity.getChangedDate();
        if (changedDate != null) {
            stmt.bindLong(8, changedDate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Languo readEntity(Cursor cursor, int offset) {
        Languo entity = new Languo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // term
            cursor.getString(offset + 2), // definition
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // example
            cursor.getInt(offset + 4), // hits
            cursor.getFloat(offset + 5), // level
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // insertDate
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // changedDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Languo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTerm(cursor.getString(offset + 1));
        entity.setDefinition(cursor.getString(offset + 2));
        entity.setExample(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHits(cursor.getInt(offset + 4));
        entity.setLevel(cursor.getFloat(offset + 5));
        entity.setInsertDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setChangedDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Languo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Languo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
